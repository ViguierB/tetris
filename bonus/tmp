==6051== Memcheck, a memory error detector
==6051== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==6051== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==6051== Command: ./menu
==6051== 
==6051== Invalid read of size 1
==6051==    at 0x404987: check_rl (tetrimino_ext.c:29)
==6051==    by 0x404A8A: multi_check (tetrimino_ext.c:47)
==6051==    by 0x404C1C: tetrims_check (tetrimino_ext.c:76)
==6051==    by 0x405254: get_all_tetriminos (tetrimino.c:117)
==6051==    by 0x4017D6: create_tetris (main.c:51)
==6051==    by 0x403FE8: ntetris (prints.c:53)
==6051==    by 0x401871: main (main.c:65)
==6051==  Address 0x58bc3ff is 1 bytes before a block of size 3 alloc'd
==6051==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6051==    by 0x406BB5: my_strdup (my_basic_funct.c:18)
==6051==    by 0x405863: my_split (my_split.c:49)
==6051==    by 0x404E9A: set_sharp (tetrimino.c:22)
==6051==    by 0x4050F2: open_tetrimino (tetrimino.c:77)
==6051==    by 0x4051FA: get_all_tetriminos (tetrimino.c:112)
==6051==    by 0x4017D6: create_tetris (main.c:51)
==6051==    by 0x403FE8: ntetris (prints.c:53)
==6051==    by 0x401871: main (main.c:65)
==6051== 
==6051== Invalid read of size 1
==6051==    at 0x405483: rtrim (utils.c:16)
==6051==    by 0x4049DB: check_rl (tetrimino_ext.c:33)
==6051==    by 0x404A8A: multi_check (tetrimino_ext.c:47)
==6051==    by 0x404C1C: tetrims_check (tetrimino_ext.c:76)
==6051==    by 0x405254: get_all_tetriminos (tetrimino.c:117)
==6051==    by 0x4017D6: create_tetris (main.c:51)
==6051==    by 0x403FE8: ntetris (prints.c:53)
==6051==    by 0x401871: main (main.c:65)
==6051==  Address 0x58bc3ff is 1 bytes before a block of size 3 alloc'd
==6051==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==6051==    by 0x406BB5: my_strdup (my_basic_funct.c:18)
==6051==    by 0x405863: my_split (my_split.c:49)
==6051==    by 0x404E9A: set_sharp (tetrimino.c:22)
==6051==    by 0x4050F2: open_tetrimino (tetrimino.c:77)
==6051==    by 0x4051FA: get_all_tetriminos (tetrimino.c:112)
==6051==    by 0x4017D6: create_tetris (main.c:51)
==6051==    by 0x403FE8: ntetris (prints.c:53)
==6051==    by 0x401871: main (main.c:65)
==6051== 
==6051== Invalid read of size 8
==6051==    at 0x40139A: print_pts (choose_tetrimino.c:30)
==6051==    by 0x401476: choose_thems (choose_tetrimino.c:49)
==6051==    by 0x40284A: playing (play.c:103)
==6051==    by 0x40400F: ntetris (prints.c:54)
==6051==    by 0x401871: main (main.c:65)
==6051==  Address 0x58bd3c0 is 16 bytes after a block of size 32 in arena "client"
==6051== 
==6051== Invalid read of size 4
==6051==    at 0x4013AF: print_pts (choose_tetrimino.c:30)
==6051==    by 0x401476: choose_thems (choose_tetrimino.c:49)
==6051==    by 0x40284A: playing (play.c:103)
==6051==    by 0x40400F: ntetris (prints.c:54)
==6051==    by 0x401871: main (main.c:65)
==6051==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6051== 
==6051== 
==6051== Process terminating with default action of signal 11 (SIGSEGV)
==6051==  Access not within mapped region at address 0x0
==6051==    at 0x4013AF: print_pts (choose_tetrimino.c:30)
==6051==    by 0x401476: choose_thems (choose_tetrimino.c:49)
==6051==    by 0x40284A: playing (play.c:103)
==6051==    by 0x40400F: ntetris (prints.c:54)
==6051==    by 0x401871: main (main.c:65)
==6051==  If you believe this happened as a result of a stack
==6051==  overflow in your program's main thread (unlikely but
==6051==  possible), you can try to increase the size of the
==6051==  main thread stack using the --main-stacksize= flag.
==6051==  The main thread stack size used in this run was 8388608.
==6051== 
==6051== HEAP SUMMARY:
==6051==     in use at exit: 444,597 bytes in 675 blocks
==6051==   total heap usage: 808 allocs, 133 frees, 465,452 bytes allocated
==6051== 
==6051== LEAK SUMMARY:
==6051==    definitely lost: 63,872 bytes in 100 blocks
==6051==    indirectly lost: 5,296 bytes in 14 blocks
==6051==      possibly lost: 1,496 bytes in 1 blocks
==6051==    still reachable: 373,933 bytes in 560 blocks
==6051==         suppressed: 0 bytes in 0 blocks
==6051== Rerun with --leak-check=full to see details of leaked memory
==6051== 
==6051== For counts of detected and suppressed errors, rerun with: -v
==6051== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
